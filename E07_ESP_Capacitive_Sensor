
/*800k - 1MOhm resistor between pins are required*/
#define send_pin 12
#define float_pin 14  

#define NONE     0
#define PRESS    1
#define HOLD     2
#define RELEASE  3

uint8_t count = 0;
uint8_t decount = 0;
uint8_t stat = NONE;
uint8_t last_stat = NONE;
long timer = 0;

#define DEBUG_CAPSENSE 1

/*  WiFi Manager */
/*  Download WifiManager from https://github.com/tzapu/WiFiManager  */

#include <WiFiClient.h>
#include <EEPROM.h>
#include <ESP8266mDNS.h>
#include <WiFiManager.h>

WiFiManager wifi(0);
#define DEBUG 
/**************************************************************************
    Souliss - Hello World for Expressif ESP8266
    
    This is the basic example, create a software push-button on Android
    using SoulissApp (get it from Play Store).  
    
    Load this code on ESP8266 board using the porting of the Arduino core
    for this platform.
        
***************************************************************************/
#define MaCaco_DEBUG_INSKETCH
#define MaCaco_DEBUG  		1

#define VNET_DEBUG_INSKETCH
#define VNET_DEBUG  		1

// Configure the framework
#include "bconf/MCU_ESP8266.h"              // Load the code directly on the ESP8266
#include "conf/Gateway.h"                   // The main node is the Gateway, we have just one node
#include "conf/IPBroadcast.h"

// **** Define the WiFi name and password ****
//#define WIFICONF_INSKETCH
//#define WiFi_SSID               "mywifi"
//#define WiFi_Password           "mypassword"    

// Include framework code and libraries
#include <ESP8266WiFi.h>
//#include <EEPROM.h>
#include "Souliss.h"

// This identify the number of the LED logic
#define MYLEDLOGIC          0               

// **** Define here the right pin for your ESP module **** 
#define	OUTPUTPIN			15

void setup()
{   
    Serial.begin(115200);
    wifi.autoConnect("Souliss");
    WiFi.mode(WIFI_STA);
    Initialize();

    //Serial.begin(115200);
    pinMode(float_pin,INPUT);
    pinMode(send_pin,OUTPUT);
    analogWrite(send_pin, 512); //I don't know if this is the right value
    Serial.println("Start");

    // Connect to the WiFi network and get an address from DHCP
    GetIPAddress();                           
    SetAsGateway(myvNet_dhcp);       // Set this node as gateway for SoulissApp  

    // This is the vNet address for this node, used to communicate with other
	// nodes in your Souliss network
    SetAddress(0xAB01, 0xFF00, 0x0000);
    SetAsPeerNode(0xAB02, 1);
	
    Set_SimpleLight(MYLEDLOGIC);        // Define a simple LED light logic
	
    pinMode(OUTPUTPIN, OUTPUT);         // Use pin as output 
}

void loop()
{ 
    // Here we start to play
    EXECUTEFAST() {                     
        UPDATEFAST();   
        
        FAST_50ms() {   // We process the logic and relevant input and output every 50 milliseconds
            Serial.print(CapSense(MYLEDLOGIC,Souliss_T1n_ToggleCmd,0,float_pin, send_pin, 3, 3000, 0)); 
            Logic_SimpleLight(MYLEDLOGIC);
            DigOut(OUTPUTPIN, Souliss_T1n_Coil,MYLEDLOGIC);
        } 
              
        // Here we handle here the communication with Android
        FAST_GatewayComms();                                        
    }
} 

uint8_t CapSense(uint8_t slot, uint8_t command, uint8_t holdcommand, uint8_t receive_p, uint8_t send_p, uint8_t thresold, uint8_t holdtime, boolean holdrepeat) {
    //analogWrite(send_p, 512); //I don't know if this is the right value
    boolean Read = digitalRead(receive_p);
        
    if(DEBUG_CAPSENSE){
        if(millis()%300==0) Serial.println("Capsense\tstat\tDRead\tcount\tdecount");
        Serial.print("\t");
        Serial.print(stat);
        Serial.print("\t");
        Serial.print(Read);
        Serial.print("\t");
        //Serial.print(CapSense(float_pin, send_pin, 3, 2500, 1)); 
        //Serial.print("\t");
        Serial.print(count);
        Serial.print("\t");
        Serial.print(decount);
        Serial.print("\t");
        Serial.println(timer);
    }
    
    if(Read){// && stat == NONE){
       count++; 
       decount = 0;
    }else count=0;
    
    if(!Read && (stat == PRESS || stat == HOLD)){
        decount++;
    }
        
    if(count >= thresold && stat == NONE){
        count = 0;
        decount = 0;
        stat = PRESS;
        mInput(slot) = command;
        timer = millis();
        return stat;      
    }
    if(stat == PRESS && millis()-timer >= holdtime){
        stat = HOLD;
        mInput(slot) = holdcommand;
        return stat;
    }  
    
    if(stat == RELEASE){
        stat = NONE;
        return stat;
    }
    if(decount >= 15){
        decount = 0;
        stat = RELEASE;
        return stat;
    }
    
    if(stat == HOLD && holdrepeat){
        mInput(slot) = holdcommand;
        return stat;   
    }
    //if(stat == NONE) return 0;
    return NONE;
}
